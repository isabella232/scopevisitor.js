#!/usr/bin/env node
// adapted from tern/bin/condense

var tern_support = require('../tern_support'), scopevisitor = require('../scopevisitor');
var path = require('path'), fs = require('fs');
require('tern/plugin/doc_comment');

var localDir = process.cwd(), ternDir = path.resolve(__dirname, '../node_modules/tern');

function usage(exit) {
  console.error('usage: ' + process.argv[1] + ' [--name name] [--plugin name]* [--def name]* [+extrafile.js]* [file.js]+');
  if (exit != null) process.exit(exit);
}

var defs = [], plugins = {doc_comment: {}}, files = [], name;

for (var i = 2, len = process.argv.length; i < len; ++i) {
  var cur = process.argv[i];
  if (cur == '--plugin' && i < len - 1) {
    var plugin = process.argv[++i], eq = plugin.indexOf('=');
    if (eq > -1)
      tern_support.loadPlugin(plugins, plugin.slice(0, eq), JSON.parse(plugin.slice(eq + 1)));
    else
      tern_support.loadPlugin(plugins, plugin, {});
  } else if (cur == '--def' && i < len - 1) {
    tern_support.loadDef(defs, process.argv[++i]);
  } else if (cur == '--name' && i < len - 1) {
    name = process.argv[++i];
  } else if (cur.charAt(0) == '-') {
    usage(1);
  } else {
    files.push(cur);
  }
}

var server = tern_support.newServer(defs, plugins);

var origins = [];
for (var i = 0; i < files.length; ++i) {
  var file = files[i];
  if (file.charAt(0) == '+') {
    file = file.slice(1);
  } else {
    origins.push(file);
    if (!name) name = file;
  }
  if (!fs.existsSync(file)) {
    console.error('File ' + file + ' does not exist');
    process.exit(1);
  }
  server.addFile(file, fs.readFileSync(file, 'utf8'));
}

if (!origins.length) usage(1);

server.flush(function(err) {
  if (err) throw err;
  if (plugins.node) server._node.modules[origins[0]].propagate(server.cx.topScope.defProp('exports'));
  scopevisitor.inspect(origins, server.cx.topScope, function(path, av, local, alias) {
    var typ = av.getType(false);
    console.log(padRight(path, 50), padRight(local ? '(local)' : '', 10), padRight(typ ? typ.toString(1) : '', 25), alias ? ' -->' + alias : '');
  });
});

function padRight(s, n) {
  if (s.length < n) {
    s += repeat(' ', n - s.length);
  }
  return s;
}

function repeat(s, n) {
  var r = '';
  for (var i = 0; i < n; ++i) {
    r += s;
  }
  return r;
}
